{{template "base" .}}

{{define "title"}}
Virtual Terminal
{{end}}

{{define "content"}}
<div class="row">
  <div class="col-md-6 offset-md-3">
    <h2 class="mt-3 text-center">Virtual Terminal</h2>
    <hr>

    <div class="alert alert-danger text-center d-none p-1" id="card_messages"></div>

    <form action="" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form mb-5"
      autocomplete="off" novalidate>

      <div class="mb-3">
        <label for="charge_amount" class="form-label">Amount</label>
        <input type="number" min="0" step="0.01" name="charge_amount" id="charge_amount" class="form-control" required
          autocomplete="charge_amount_new">
      </div>

      <!-- <div class="mb-3">
        <label for="first_name" class="form-label">First Name</label>
        <input type="text" name="first_name" id="first_name" class="form-control" required
          autocomplete="first_name_new">
      </div>

      <div class="mb-3">
        <label for="last_name" class="form-label">Last Name</label>
        <input type="text" name="last_name" id="last_name" class="form-control" required autocomplete="last_name_new">
      </div> -->

      <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" name="email" id="email" class="form-control" required autocomplete="email_new">
      </div>

      <div class="mb-3">
        <label for="card_holder_name" class="form-label">Name on Card</label>
        <input type="text" name="card_holder_name" id="card_holder_name" class="form-control" required
          autocomplete="card_holder_name_new">
      </div>

      <!-- card number will be built by stripe-->
      <div class="mb-3">
        <label for="card_element" class="form-label">Credit Card</label>
        <div id="card_element" class="form-control"></div>
        <div class="alert alert-danger small text-center py-1 d-none" id="card_errors" role="alert"></div>
        <div class="alert alert-success py-1 text-center d-none" id="card_success" role="alert"></div>
      </div>

      <hr>

      <a id="pay_button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>

      <div class="text-center d-none" id="processing_payment">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>


      <input type="hidden" name="amount" id="amount">
      <input type="hidden" name="payment_intent_id" id="payment_intent_id">
      <input type="hidden" name="payment_method_id" id="payment_method_id">
      <input type="hidden" name="payment_amount" id="payment_amount">
      <input type="hidden" name="payment_currency" id="payment_currency">
    </form>

  </div>
</div>


<div class="row">
  <div class="col-md-6 offset-md-3 d-none" id="receipt">
    <h3 class="mt-3 text-center">Receipt</h3>
    <hr>
    <p>
      <strong>Bank Return Code</strong>: <span id="bank-return-code"></span>
    </p>
    <p>
      <a class="btn btn-primary" href="/admin/virtual-terminal">
        Charge another card
      </a>
    </p>

  </div>
</div>
{{end}}

{{define "js"}}
<script src="https://js.stripe.com/v3"></script>

<script>
  // in virtual terminal, charge_ammount is in dollar, but stripe charge is in cent
  document.getElementById("charge_amount").addEventListener("change", function (evt) {
    if (evt.target.value !== "") {
      document.getElementById("amount").value = String((parseFloat(evt.target.value) * 100).toFixed(0))
    } else {
      document.getElementById("amount").value = 0;
    }
  })


  let card, stripe;

  const cardMessages = document.getElementById("card_messages");
  const payButton = document.getElementById("pay_button");
  const processing = document.getElementById("processing_payment");

  stripe = Stripe('{{.StripePublishableKey}}');

  function hidePayButton() {
    payButton.classList.add("d-none");
    processing.classList.remove("d-none");
  }


  function showPayButtons() {
    payButton.classList.remove("d-none");
    processing.classList.add("d-none");
  }

  function showCardError(msg) {
    cardMessages.classList.add("alert-danger");
    cardMessages.classList.remove("alert-success");
    cardMessages.classList.remove("d-none");
    cardMessages.innerText = msg;
  }

  function showCardSuccess() {
    cardMessages.classList.remove("alert-danger");
    cardMessages.classList.add("alert-success");
    cardMessages.classList.remove("d-none");
    cardMessages.innerText = "Transaction successful";
  }

  function val() {
    let form = document.getElementById("charge_form");

    if (form.checkValidity() === false) {
      this.event.preventDefault();
      this.event.stopPropagation();
      form.classList.add("was-validated");
      return;
    }
    form.classList.add('was-validated')
    hidePayButton();

    // amount in string dollar cent in stripePayload, for internal api consumsion
    let amountToCharge = document.getElementById("amount").value

    let payload = {
      amount: amountToCharge,
      currency: "usd"
    }

    const requestOptions = {
      method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload),
    }

    fetch("{{.API}}/api/payment-intent", requestOptions)
      .then(response => response.text())
      .then(response => {
        let data;
        try {
          data = JSON.parse(response);
          stripe.confirmCardPayment(data.client_secret, {
            payment_method: {
              card: card,
              billing_details: {
                name: document.getElementById("card_holder_name").value,
              }
            }
          }).then(function (result) {
            if (result.error) {
              // card declined, or something went wrong with the card
              showCardError(result.error.message);
              showPayButtons();
            } else if (result.paymentIntent) {
              if (result.paymentIntent.status === "succeeded") {
                // we have charged the card   
                // document.getElementById("payment_intent_id").value = result.paymentIntent.id;
                // document.getElementById("payment_method_id").value = result.paymentIntent.payment_method;
                // document.getElementById("payment_amount").value = result.paymentIntent.amount;
                // document.getElementById("payment_currency").value = result.paymentIntent.currency;

                processing.classList.add("d-none");
                showCardSuccess();
                saveTransaction(result);

              }
            }
          })
        } catch (err) {
          console.log(err);
          showCardError("Invalid response from payment gateway!");
          showPayButtons();
        }
      })
  }


  function saveTransaction(result) {
    let payload = {
      amount: parseInt(document.getElementById("amount").value, 10),
      currency: result.paymentIntent.currency,
      first_name: "",
      last_name: "",
      email: document.getElementById("email").value,
      payment_intent_id: result.paymentIntent.id,
      payment_method_id: result.paymentIntent.payment_method,
    }

    let token = localStorage.getItem("token");

    const requestOptions = {
      method: "post",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token,
      },
      body: JSON.stringify(payload),
    }

    fetch("{{.API}}/api/admin/virtual-terminal-succeeded", requestOptions)
      .then(response => response.json())
      .then(function (data) {
        console.log(data);
        processing.classList.add("d-none");
        showCardSuccess();
        document.getElementById("bank-return-code").innerHTML = data.bank_return_code;
        document.getElementById("receipt").classList.remove("d-none");
      })
  }

  (function () {
    // create stripe & elements
    const elements = stripe.elements();
    const style = {
      base: {
        fontSize: "16px",
        lineHeight: "24px"
      }
    }

    // create card entry
    card = elements.create('card', {
      style,
      hidePostalCode: true
    });

    card.mount("#card_element");

    // check for input errors
    card.addEventListener('change', function (event) {
      var displayError = document.getElementById("card_errors");

      if (event.error) {
        displayError.classList.remove('d-none');
        displayError.textContent = event.error.message;
      } else {
        displayError.classList.add('d-none');
        displayError.textContent = "";
      }
    })
  })()
</script>
{{end}}